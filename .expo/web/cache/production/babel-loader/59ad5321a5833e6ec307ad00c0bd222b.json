{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import*as TodoActionTypes from\"../actionTypes/todolist\";var initialState={items:[{text:'Buy coffee',key:1,completed:false},{text:'Build my app',key:2,completed:false},{text:'Study for the exam',key:3,completed:false}]};export var reducer=function reducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;var items=state.items;var type=action.type,payload=action.payload;switch(type){case TodoActionTypes.ADD_ITEM:return _objectSpread(_objectSpread({},state),{},{items:[].concat(_toConsumableArray(items),[{key:action.id,text:payload,completed:false}])});case TodoActionTypes.REMOVE_ITEM:return{items:items.filter(function(item){return item.key!=payload;})};case TodoActionTypes.TOGGLE_ITEM_COMPLETED:return{items:items.map(function(item){if(item.key!==payload)return item;else return _objectSpread(_objectSpread({},item),{},{completed:!item.completed});})};case TodoActionTypes.REMOVE_COMPLETED_ITEMS:return{items:items.filter(function(item){return!item.completed;})};default:return state;}};","map":{"version":3,"sources":["/Users/mickey/projects/ToDoList/redux/todoRedux.js"],"names":["TodoActionTypes","initialState","items","text","key","completed","reducer","state","action","type","payload","ADD_ITEM","id","REMOVE_ITEM","filter","item","TOGGLE_ITEM_COMPLETED","map","REMOVE_COMPLETED_ITEMS"],"mappings":"w6BAAA,MAAO,GAAKA,CAAAA,eAAZ,+BAQA,GAAMC,CAAAA,YAAY,CAAG,CACnBC,KAAK,CAAE,CACL,CAAEC,IAAI,CAAE,YAAR,CAAsBC,GAAG,CAAE,CAA3B,CAA8BC,SAAS,CAAE,KAAzC,CADK,CAEL,CAAEF,IAAI,CAAE,cAAR,CAAwBC,GAAG,CAAE,CAA7B,CAAgCC,SAAS,CAAE,KAA3C,CAFK,CAGL,CAAEF,IAAI,CAAE,oBAAR,CAA8BC,GAAG,CAAE,CAAnC,CAAsCC,SAAS,CAAE,KAAjD,CAHK,CADY,CAArB,CAUA,MAAO,IAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,EAAkC,IAAjCC,CAAAA,KAAiC,2DAAzBN,YAAyB,IAAXO,CAAAA,MAAW,8CAC/CN,CAAAA,KAD+C,CACrCK,KADqC,CAC/CL,KAD+C,IAE/CO,CAAAA,IAF+C,CAE7BD,MAF6B,CAE/CC,IAF+C,CAEzCC,OAFyC,CAE7BF,MAF6B,CAEzCE,OAFyC,CAIvD,OAAOD,IAAP,EAEE,IAAKT,CAAAA,eAAe,CAACW,QAArB,CACE,sCACKJ,KADL,MAEEL,KAAK,8BAAMA,KAAN,GAAY,CACfE,GAAG,CAAEI,MAAM,CAACI,EADG,CAEfT,IAAI,CAAEO,OAFS,CAGfL,SAAS,CAAE,KAHI,CAAZ,EAFP,GASF,IAAKL,CAAAA,eAAe,CAACa,WAArB,CACE,MAAO,CACLX,KAAK,CAAEA,KAAK,CAACY,MAAN,CAAc,SAACC,IAAD,QAAUA,CAAAA,IAAI,CAACX,GAAL,EAAWM,OAArB,EAAd,CADF,CAAP,CAIF,IAAKV,CAAAA,eAAe,CAACgB,qBAArB,CAEE,MAAO,CACLd,KAAK,CAAEA,KAAK,CAACe,GAAN,CAAU,SAACF,IAAD,CAAQ,CACvB,GAAIA,IAAI,CAACX,GAAL,GAAaM,OAAjB,CACI,MAAOK,CAAAA,IAAP,CADJ,IAGI,uCACKA,IADL,MAEEV,SAAS,CAAC,CAACU,IAAI,CAACV,SAFlB,GAIL,CARM,CADF,CAAP,CAYF,IAAKL,CAAAA,eAAe,CAACkB,sBAArB,CACG,MAAO,CACLhB,KAAK,CAAEA,KAAK,CAACY,MAAN,CAAa,SAACC,IAAD,QAAS,CAACA,IAAI,CAACV,SAAf,EAAb,CADF,CAAP,CAIH,QACG,MAAOE,CAAAA,KAAP,CArCL,CAwCD,CA5CM","sourcesContent":["import * as TodoActionTypes from '../actionTypes/todolist';\n\n// const types = {\n// }\n\n// export const actionCreators = {\n// }\n\nconst initialState = {\n  items: [\n    { text: 'Buy coffee', key: 1, completed: false },\n    { text: 'Build my app', key: 2, completed: false },\n    { text: 'Study for the exam', key: 3, completed: false },\n      \n  ]\n  \n}\n\nexport const reducer = (state = initialState, action) => {\n  const { items } = state\n  const { type, payload } = action\n\n  switch(type) {\n    \n    case TodoActionTypes.ADD_ITEM: \n      return {\n        ...state,\n        items: [...items,{\n          key: action.id,\n          text: payload,\n          completed: false\n        }]\n      }\n\n    case TodoActionTypes.REMOVE_ITEM:\n      return {\n        items: items.filter( (item) => item.key!= payload )\n      }\n\n    case TodoActionTypes.TOGGLE_ITEM_COMPLETED:\n       \n      return {\n        items: items.map((item)=>{\n          if (item.key !== payload)\n              return item\n          else \n              return{\n                ...item,\n                completed:!item.completed          \n              }\n        })       \n      }  \n     \n    case TodoActionTypes.REMOVE_COMPLETED_ITEMS:\n       return {\n         items: items.filter((item)=> !item.completed )\n       }\n      \n    default: \n       return state;\n    \n  }\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}