{"ast":null,"code":"import{createStore,applyMiddleware}from'redux';import thunk from'redux-thunk';import{createLogger}from'redux-logger';import{reducer}from\"../redux/todoRedux\";var middleware=[thunk];export default(function(initialState){var store=createStore(reducer,initialState,applyMiddleware.apply(void 0,middleware));return store;});","map":{"version":3,"sources":["/Users/mickey/projects/ToDoList/store/configureStore.js"],"names":["createStore","applyMiddleware","thunk","createLogger","reducer","middleware","initialState","store"],"mappings":"AAAA,OAASA,WAAT,CAAsBC,eAAtB,KAA6C,OAA7C,CAKA,MAAOC,CAAAA,KAAP,KAAkB,aAAlB,CAIA,OAASC,YAAT,KAA6B,cAA7B,CACA,OAASC,OAAT,0BAGA,GAAMC,CAAAA,UAAU,CAAG,CAAEH,KAAF,CAAnB,CAYA,eAAe,SAACI,YAAD,CAAkB,CAE/B,GAAMC,CAAAA,KAAK,CAAGP,WAAW,CACvBI,OADuB,CAEvBE,YAFuB,CAGvBL,eAAe,MAAf,QAAmBI,UAAnB,CAHuB,CAAzB,CAKA,MAAOE,CAAAA,KAAP,CACD,CARD","sourcesContent":["import { createStore, applyMiddleware } from 'redux'\n\n// Thunk middleware allows actions to be chained and waited on by returning\n// a function from that action\n// https://github.com/gaearon/redux-thunk\nimport thunk from 'redux-thunk'\n\n// Logs all actions going through redux into console\n// https://github.com/evgenyrodionov/redux-logger\nimport { createLogger } from 'redux-logger'\nimport { reducer } from '../redux/todoRedux'\n\n// http://redux.js.org/docs/advanced/Middleware.html\nconst middleware = [ thunk ]\n\n// Use the NODE_ENV to include logging and debugging tools\n// in development environment. They will be compiled out of\n// the production build.\n// if (process.env.NODE_ENV === 'development') {\n//   middleware.push(createLogger())\n//   // Turns on Reactotron debugging tool\n//   require('../config/ReactotronConfig')\n// }\n\n// Can use a preloaded initialState if available, in this case we don't\nexport default (initialState) => {\n  // http://redux.js.org/docs/api/createStore.html\n  const store = createStore(\n    reducer,\n    initialState,\n    applyMiddleware(...middleware),\n  )\n  return store\n}\n"]},"metadata":{},"sourceType":"module"}