{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport { reducer } from \"../redux/todoRedux\";\nvar middleware = [thunk];\n\nif (process.env.NODE_ENV === 'development') {\n  middleware.push(createLogger());\n\n  require(\"../config/ReactotronConfig\");\n}\n\nexport default (function (initialState) {\n  var store = createStore(reducer, initialState, applyMiddleware.apply(void 0, middleware));\n  return store;\n});","map":{"version":3,"sources":["/Users/mickey/projects/ToDoList/store/configureStore.js"],"names":["createStore","applyMiddleware","thunk","createLogger","reducer","middleware","process","env","NODE_ENV","push","require","initialState","store"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AAKA,OAAOC,KAAP,MAAkB,aAAlB;AAIA,SAASC,YAAT,QAA6B,cAA7B;AACA,SAASC,OAAT;AAGA,IAAMC,UAAU,GAAG,CAAEH,KAAF,CAAnB;;AAKA,IAAII,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;AAC1CH,EAAAA,UAAU,CAACI,IAAX,CAAgBN,YAAY,EAA5B;;AAEAO,EAAAA,OAAO,8BAAP;AACD;;AAGD,gBAAe,UAACC,YAAD,EAAkB;AAE/B,MAAMC,KAAK,GAAGZ,WAAW,CACvBI,OADuB,EAEvBO,YAFuB,EAGvBV,eAAe,MAAf,SAAmBI,UAAnB,CAHuB,CAAzB;AAKA,SAAOO,KAAP;AACD,CARD","sourcesContent":["import { createStore, applyMiddleware } from 'redux'\n\n// Thunk middleware allows actions to be chained and waited on by returning\n// a function from that action\n// https://github.com/gaearon/redux-thunk\nimport thunk from 'redux-thunk'\n\n// Logs all actions going through redux into console\n// https://github.com/evgenyrodionov/redux-logger\nimport { createLogger } from 'redux-logger'\nimport { reducer } from '../redux/todoRedux'\n\n// http://redux.js.org/docs/advanced/Middleware.html\nconst middleware = [ thunk ]\n\n// Use the NODE_ENV to include logging and debugging tools\n// in development environment. They will be compiled out of\n// the production build.\nif (process.env.NODE_ENV === 'development') {\n  middleware.push(createLogger())\n  // Turns on Reactotron debugging tool\n  require('../config/ReactotronConfig')\n}\n\n// Can use a preloaded initialState if available, in this case we don't\nexport default (initialState) => {\n  // http://redux.js.org/docs/api/createStore.html\n  const store = createStore(\n    reducer,\n    initialState,\n    applyMiddleware(...middleware),\n  )\n  return store\n}\n"]},"metadata":{},"sourceType":"module"}